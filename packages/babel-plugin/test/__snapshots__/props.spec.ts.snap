// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`props > should not work with array props 1`] = `
"function testFunction([prop1, prop2], otherProps) {
  return <div prop1={prop1} prop2={prop2}>{otherProps}</div>;
}"
`;

exports[`props > should not work with not pattern props 1`] = `
"function testFunction(prop1, prop2) {
  return <div prop1={prop1} prop2={prop2} />;
}"
`;

exports[`props > should replace function parameter with "props" 1`] = `
"function testFunction(__props) {
  return <div prop1={__props.prop1} prop2={__props.prop2} />;
}"
`;

exports[`props > should replace function parameter with 'props' when it's an object 1`] = `
"function testFunction(__props, otherProps) {
  return <div prop1={__props.prop1} prop2={__props.prop2}>{otherProps}</div>;
}"
`;

exports[`props > should work just rest props 1`] = `
"function testFunction(restProps) {
  return <div prop1={restProps.$prop1} prop2={restProps.prop2} rest={{
    ...restProps
  }} />;
}"
`;

exports[`props > should work with deep props 1`] = `
"function testFunction(__props) {
  return <div prop4={__props.prop1.prop2.prop3.prop4} prop5={__props.prop1.prop2.prop3.prop5} />;
}"
`;

exports[`props > should work with rest pattern props 1`] = `
"import { reactive as _reactive$ } from "essor";
function testFunction(__props) {
  const restProps = _reactive$(__props, ["prop1", "prop2"]);
  return <div prop1={__props.prop1} prop2={__props.prop2} {...restProps} />;
}"
`;

exports[`props > should work with rest value props 1`] = `
"import { reactive as _reactive$ } from "essor";
function testFunction(__props) {
  const restProps = _reactive$(__props, ["prop1", "prop2"]);
  return <div prop1={__props.prop1} prop2={__props.prop2} rest={{
    ...restProps
  }} />;
}"
`;
